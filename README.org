#+TITLE: cl-phonetic

A phonetic pattern matching library for Common Lisp.

This library is intended to replace the [[https://github.com/bgutter/sylvia][Sylvia library]] for Python.

* Features

This library is in-progress, and each feature is at varying degrees of readiness.

| Status Symbol | Meaning                                                                                           |
|---------------+---------------------------------------------------------------------------------------------------|
| üí°           | Planning stage.                                                                                   |
| ‚õè           | Initial groundwork started. Usually, this just means that it's already done in Sylvia's codebase. |
| üöß           | Currently under active implementation.                                                            |
| ‚úÖ           | Done                                                                                              |

** üöß Phonetic Pattern Matching via Regular Expressions

cl-phonetic can search a phonetic dictionary for words whose pronunciations match a phonetic regular expression. These regex are similar to Perl in syntax, but, have nothing to do with ASCII or Unicode character sets. Instead, the alphabet of the language tested by these regex consists only of phonemes.

In a phonetic regex, phoneme literals are defined according to the ARPABET, as it was used by [[http://www.speech.cs.cmu.edu/cgi-bin/cmudict][cmudict]]. A full list of ARPABET phoneme encodings from that link is reproduced here.

| Phoneme | Example | Translation  |
|---------+---------+--------------|
| =AA=    | odd     | =AA D=       |
| =AE=    | at      | =AE T=       |
| =AH=    | hut     | =HH AH T=    |
| =AO=    | ought   | =AO T=       |
| =AW=    | cow     | =K AW=       |
| =AY=    | hide    | =HH AY D=    |
| =B=     | be      | =B IY=       |
| =CH=    | cheese  | =CH IY Z=    |
| =D=     | dee     | =D IY=       |
| =DH=    | thee    | =DH IY=      |
| =EH=    | Ed      | =EH D=       |
| =ER=    | hurt    | =HH ER T=    |
| =EY=    | ate     | =EY T=       |
| =F=     | fee     | =F IY=       |
| =G=     | green   | =G R IY N=   |
| =HH=    | he      | =HH IY=      |
| =IH=    | it      | =IH T=       |
| =IY=    | eat     | =IY T=       |
| =JH=    | gee     | =JH IY=      |
| =K=     | key     | =K IY=       |
| =L=     | lee     | =L IY=       |
| =M=     | me      | =M IY=       |
| =N=     | knee    | =N IY=       |
| =NG=    | ping    | =P IH NG=    |
| =OW=    | oat     | =OW T=       |
| =OY=    | toy     | =T OY=       |
| =P=     | pee     | =P IY=       |
| =R=     | read    | =R IY D=     |
| =S=     | sea     | =S IY=       |
| =SH=    | she     | =SH IY=      |
| =T=     | tea     | =T IY=       |
| =TH=    | theta   | =TH EY T AH= |
| =UH=    | hood    | =HH UH D=    |
| =UW=    | two     | =T UW=       |
| =V=     | vee     | =V IY=       |
| =W=     | we      | =W IY=       |
| =Y=     | yield   | =Y IY L D=   |
| =Z=     | zee     | =Z IY=       |
| =ZH=    | seizure | =S IY ZH ER= |

When they occur in a phonetic regex, these phoneme literals should be space delimited. For example, =K AE T= is a phonetic regex which matches the English word "cat".

Since these regex are Perl-like, =K AE .*= is also a valid phonetic regex, and matches words like "cat", "Canberra", "cathode", etc.

=cl-phonetic= further extends Perl syntax by introducing a new facility for defining classes and sequences of phonemes. To start;
- =#= matches any single consonant phoneme
- =@= matches any single vowel phoneme
- =%= matches any single syllable

Both the =#= and =@= class symbols may optionally accept arguments which further constrain matches. These arguments consist of comma delimited characters within angle brackets. For example, =#<v,,f>= which matches only voiced, fricative consonants.

You need only supply as many arguments as desired, and can leave fields empty as needed. For example, the following class definitions are all valid, and all compile to the same phoneme sets; =@=, =@<>=, =@<,>=, and =@<,,>=.

For consonant classes (the =#<,,>= pattern), up to three arguments can be specified;
- First, a single character which can restrict matches based on voicing.
- Second, sequence of characters which restricts matches based on place of articulation.
- Third, a sequence of characters which restricts matches based on method of articulation.

When multiple characters are supplied for a single parameter, the resulting matches are a union over those characters. That is, there's an implicit =OR= over your arguments.

Consonant voicing arguments:
| Character | Restricts Matches To |
|-----------+----------------------|
| v         | Voiced               |
| u         | Unvoiced             |

Consonant place-of-articulation arguments
| Character | Restricts Matches To |
|-----------+----------------------|
| a         | Alveolar             |
| b         | Bilabial             |
| d         | Dental               |
| g         | Glottal              |
| l         | Labio-dental         |
| p         | Post-alveolar        |
| t         | Palatal              |
| v         | Velar                |

Consonant method-of-articulation arguments
| Character | Restricts Matches To |
|-----------+----------------------|
| a         | Affricate            |
| f         | Fricative            |
| l         | Lateral              |
| n         | Nasal                |
| p         | Plosive              |
| x         | Approximant          |

Examples:
| Phoneme Class Definition | What It Matches                                                                                               |
|--------------------------+---------------------------------------------------------------------------------------------------------------|
| =#=                      | All consonants                                                                                                |
| =#<,,>=                  | All consonants                                                                                                |
| =#<v>=                   | All voiced consonants                                                                                         |
| =#<v,,>=                 | All voiced consonants                                                                                         |
| =#<,,p>=                 | All plosive consonants                                                                                        |
| =#<v,,p>=                | All consonants which are both voiced and plosive                                                              |
| =#<,bd,>=                | All consonants which are either bilabial or dental                                                            |
| =#<,,fa>=                | All consonants which are either fricative or affricate                                                        |
| =#<u,bd,fa>=             | All consonants which are unvoiced, and also either bilabial or dental, and also either fricative or affricate |

For vowel classes (the =@<,,>= pattern), three parameters may also be specified;
- First, height
- Second, backness
- Third, roundedness

The first two of these categories are fairly fluid, and so are encoded as numbers. As with consonants, when multiple characters are supplied for a single parameter, the resulting matches are a union over those characters. That is, there's an implicit =OR= over your arguments.

Vowel height arguments:
| Character | Restricts Matches To |
|-----------+----------------------|
|         1 | Open                 |
|         2 | Near Open            |
|         3 | Open Mid             |
|         4 | Mid                  |
|         5 | Close Mid            |
|         6 | Near Close           |
|         7 | Close                |

Vowel backness arguments:
| Character | Restricts Matches To  |
|-----------+-----------------------|
|         1 | Front                 |
|         2 | Central               |
|         3 | Back                  |

Vowel roundedness arguments:
| Character | Restricts Matches To |
|-----------+----------------------|
| r         | Rounded              |
| u         | Unrounded            |

Examples:
| Phoneme Class Definition | What it Matches                                                     |
|--------------------------+---------------------------------------------------------------------|
| =@=                      | All vowels                                                          |
| =@<,,>=                  | All vowels                                                          |
| =@<,,r>=                 | All rounded vowels                                                  |
| =@<12,,u>=               | All vowels which are unrounded and either open or near open height. |
| =@<,23>=                 | All vowels with either a central or back backness                   |

Diphthongs and the r-colored phoneme, for now, are excluded whenever any restrictions are applied. They will only match a plain =@=, or, their associated phoneme literals.

** üöß Phonetic Metapatterns via Regular Expression Generators

cl-phonetic can function as a rhyming dictionary by way of phonetic metapatterns. Other literary devices, like assonance, consonance, and alliteration, can also be queried.

A phonetic metapattern is a function which transforms a pronunciation (the phoneme sequence associated with a word) into a regular expression. This resulting regular expression implements the given metapattern over the given word.

*rhyme*

The ='rhyme= metapattern applied to a word =word= produces a regular expression which matches words that rhyme with =word=. A rhyming word is defined here as any phoneme sequence whose phonemes match exactly after the first vowel phoneme. With the =:loose= option, additional consonant phonemes may be interspersed.

*consonance*

The ='consonance= metapattern produces a regular expression which matches all words containing the same sequence of consonant phonemes as the target word. Vowel phonemes are ignored. With the =:loose= option, additional consonants may be interspersed.

*assonance*

The ='assonance= metapattern produces a regular expression which matches all words containing the same sequence of vowel phonemes as the target word. Consonant phonemes are ignored. With the =:loose= option, additional vowels may occur before or after the matched sequence.

*alliteration*

The ='alliteration= metapattern produces a regular expression which matches all words which begin with the same phoneme as the target word.

One goal of cl-phonetic is to redefine "rhyme" and "near rhyme" to make better use of the properties of phonemes, potentially yielding more sensible results. For example, we could allow only unvoiced plosives between phonemes in =:near-rhyme=, rather than any consonant.

This is still in progress.

** ‚õè Pronunciation Inferencing

Character sequence to phoneme sequence mapping.

This is still in progress.

May port general algorithm from the Sylvia Python package. May try something else.

** üí° Corpus Statistics

Calculating phoneme N-grams, at the bare minimum. Basically a quick-path for processing large corpus.

* User Manual

** Reading a Phonetic Dictionary

Currently, only cmudict-like text files are supported.

#+begin_src lisp :exports both :results raw drawer
(defparameter *dict* (from-cmudict #P"cmudict"))
#+end_src

#+RESULTS:
#+begin_example
*DICT*
#+end_example

** Pronounce a word.

=pronounce-word= produces a list of =pronunciation= objects.

Sometimes, there's just one pronunciation in it:

#+begin_src lisp :exports both :results raw drawer
(pronounce-word *dict* "creepy")
#+end_src

#+RESULTS:
#+begin_example
(#<PRONUNCIATION (K R IY P IY)>)
T
#+end_example

Sometimes, there's more:

#+begin_src lisp :exports both :results raw drawer
(pronounce-word *dict* "tomato")
#+end_src

#+RESULTS:
#+begin_example
(#<PRONUNCIATION (T AH M AA T OW)> #<PRONUNCIATION (T AH M EY T OW)>)
T
#+end_example

** Search for words matching a phonetic regular expression.

=regex-search= returns an alist of words (strings) and pronunciation lists.

#+begin_src lisp :exports both :results raw drawer
(regex-search *dict* "K AE T")
#+end_src

#+RESULTS:
#+begin_example
(("katt" #<PRONUNCIATION (K AE T)>) ("kat" #<PRONUNCIATION (K AE T)>)
 ("catt" #<PRONUNCIATION (K AE T)>) ("cat" #<PRONUNCIATION (K AE T)>))
#+end_example

=the-words= takes an alist of that form and returns list a list of words.

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "K AE T"))
#+end_src

#+RESULTS:
#+begin_example
("katt" "kat" "catt" "cat")
#+end_example

The regex are generally Perl-like. Searching is done as "matches", meaning that the word's pronunciation must match the entire regex. Add =.*= to both ends if you want a scanning behavior.

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* ".* K AE T .*"))
#+end_src

#+RESULTS:
#+begin_example
("yekaterinburg" "wildcatting" "wildcatters" "wildcatter" "wildcats" "wildcat"
 "wicat" "tomcat" "thundercats" "thundercat" "scattershot" "scattering"
 "scattergory" "scattergories" "scattergood" "scattered" "scatter" "scatology"
 "scatological" "scat" "pussycats" "pussycat" "polecats" "polecat" "piscataway"
 "muscat" "metlakatla" "mchatton" "mcatee" "kotsonis's" "kotsonis'" "kotsonis"
 "kitcat" "kikatte" "katzman" "katzin" "katzer" "katzenstein" "katzenberger"
 "katzenberg's" "katzenberg" "katzenbach" "katzen" "katz" "kattner" "katt"
 "katsushi" "katsaros" "katsanos" "kats" "katmandu" "katashiba" "kat"
 "copycatting" "copycats" "copycat" "concatenation" "concatenating"
 "concatenates" "concatenated" "concatenate" "catwoman" "catwalk" "catty"
 "catton" "catto" "cattlemen's" "cattlemen" "cattle" "catterton" "catterson"
 "catterall" "cattanach" "catt" "catskills" "catskill" "cats" "catron"
 "catrett" "catrambone" "caton" "catoe" "catnip" "catnap" "catlin" "catlike"
 "catlett" "catledge" "catkins" "catfish" "caterwaul" "caterpiller's"
 "caterpiller" "caterpillars" "caterpillar's" "caterpillar" "category"
 "categorizing" "categorizes" "categorized" "categorize" "categorization"
 "categories" "categorically" "categorical" "catechism" "catcalls" "catcall"
 "catbird" "catatonic" "catastrophic" "cataracts" "cataract" "catapults"
 "catapulting" "catapulted" "catapult" "catamount" "catalyzed" "catalyze"
 "catalytic" "catalysts" "catalyst's" "catalyst" "catalonian" "catalonia"
 "cataloguing" "catalogues" "catalogued" "catalogue" "catalogs" "cataloging"
 "catalogers" "cataloger" "cataloged" "catalog" "catalina" "catalans" "catalan"
 "catala" "catain" "catacombs" "catacomb" "cataclysmic" "cataclysm"
 "cat-o-nine-tails" "cat-6" "cat-4" "cat-3" "cat-2" "cat-1" "cat's" "cat"
 "bobcats" "bobcat" "bacot")
#+end_example

Again, anything that works with Perl should work here. =.?= translates to "optionally, a single phoneme of any kind".

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* ".? AE T"))
#+end_src

#+RESULTS:
#+begin_example
("vat" "that" "tat" "shatt" "schadt" "sat" "ratte" "rat" "patt" "pat" "nat"
 "matte" "matt" "mat" "lat" "katt" "kat" "jagt" "hatt" "hat" "gnat" "gatt"
 "gat" "fat" "dat" "chat" "catt" "cat" "bhatt" "batte" "batt" "bat" "at")
#+end_example


And so on.

Consonants are encoded with =#= symbols.

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "# AE T"))
#+end_src

#+RESULTS:
#+begin_example
("vat" "that" "tat" "shatt" "schadt" "sat" "ratte" "rat" "patt" "pat" "nat"
 "matte" "matt" "mat" "lat" "katt" "kat" "jagt" "hatt" "hat" "gnat" "gatt"
 "gat" "fat" "dat" "chat" "catt" "cat" "bhatt" "batte" "batt" "bat")
#+end_example

They can be further restricted by voicing, place of articulation, and manner of articulation.

For example, here are the words ending with "AE T" that begin with a voiced, fricative consonant:

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "#<v,,f> AE T"))
#+end_src

#+RESULTS:
#+begin_example
("vat" "that")
#+end_example

And the words ending with "AE T" that begin with a bilabial, plosive consonant:

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "#<,b,p> AE T"))
#+end_src

#+RESULTS:
#+begin_example
("patt" "pat" "bhatt" "batte" "batt" "bat")
#+end_example

And the words ending with "AE T" that begin with a bilabial or labio-dental consonant:

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "#<,bl,> AE T"))
#+end_src

#+RESULTS:
#+begin_example
("vat" "patt" "pat" "matte" "matt" "mat" "fat" "bhatt" "batte" "batt" "bat")
#+end_example

All single syllable words beginning with a "B" phoneme, a single vowel, and a "D".

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "B @ D"))
#+end_src

#+RESULTS:
#+begin_example
("byrd" "burd" "budde" "budd" "bud" "boyde" "boyd" "bowed" "booed" "bode"
 "bird" "bide" "bid" "beede" "bede" "bed" "bead" "bayed" "bawd" "baud" "bade"
 "bad" "baade")
#+end_example

The previous expression, restricted to vowels with a height between open and mid, inclusive.

#+begin_src lisp :exports both :results raw drawer
(the-words (regex-search *dict* "B @<1234,,> D"))
#+end_src

#+RESULTS:
#+begin_example
("budde" "budd" "bud" "bed" "bawd" "baud" "bad" "baade")
#+end_example

** Generating a phonetic regular expression

=generate-regex= creates a phonetic regular expression from a predefined metapattern and a word.

#+begin_src lisp :exports both :results raw drawer
(generate-regex 'rhyme (first (pronounce-word *dict* "Candor")))
#+end_src

#+RESULTS:
#+begin_example
.* AE N D ER
#+end_example

Searching for this regex yields words that perfectly rhyme with "Candor".

#+begin_src lisp :exports both :results raw drawer
     (the-words (regex-search *dict*
                              (generate-regex 'rhyme
                                              (first (pronounce-word *dict* "Candor")))))
#+end_src

#+RESULTS:
#+begin_example
("zander" "wicklander" "vandevander" "vander" "telander" "swartzlander"
 "subcommander" "standre" "stander" "stadtlander" "slander" "skenandore"
 "sjolander" "scalamandre" "santander" "sandor" "sander" "salamander"
 "rosander" "rander" "philander" "pander" "oleander" "nederlander" "meander"
 "mcalexander" "mander" "mainlander" "lysander" "leander" "landor" "lander"
 "highlander" "hander" "grander" "glander" "gerrymander" "gander" "evander"
 "coriander" "commander" "candor" "calamander" "bystander" "brander" "blander"
 "bander" "aulander" "ander" "alexander" "aleksandr" "aleksander")

#+end_example

But, if all you're going to do is search for the generated regex, just use =find-metapattern=...

** Searching for rhymes, and other metapatterns

=find-metapattern= wraps the process of generating a regular expression & searching it:

#+begin_src lisp :exports both :results raw drawer
(the-words (find-metapattern *dict* 'rhyme "Turkey" :loose t))
#+end_src

#+RESULTS:
#+begin_example
("yerkey" "yerkes" "yaworski" "xerxes" "workweeks" "workweek" "worksheets"
 "worksheet" "tyburski" "twersky" "turski" "turnkey" "turkeys" "turkey's"
 "turkey" "swirsky" "swiderski" "sturkie" "stachurski" "sircy" "shirkey"
 "quirky" "purkey" "podgurski" "pirkey" "persky" "perky" "perkey" "pearcy"
 "murky" "mirsky" "merkley" "merkey" "kuberski" "koperski" "kirksey" "kirkley"
 "kirkey" "kirkby" "kasperski" "jerky" "hirschfield" "gursky" "gurski" "girsky"
 "gerski" "gerke" "figurski" "dworsky" "durkee" "burkley" "burkey" "burkeen"
 "birky" "birkey" "bertke" "berkley" "berklee" "berkey" "berkeley's" "berkeley"
 "anarchy" "aldercy" "albuquerque")
#+end_example

=test-metapattern= just tests whether a metapattern holds over two words.

Here, it does;

#+begin_src lisp :exports both :results raw drawer
(test-metapattern *dict* 'alliteration "Xenon" "Czar")
#+end_src

#+RESULTS:
#+begin_example
(("Czar" #<PRONUNCIATION (Z AA R)>))
#+end_example

And here, it does not;

#+begin_src lisp :exports both :results raw drawer
(test-metapattern *dict* 'rhyme "Wallet" "Stanford")
#+end_src

#+RESULTS:
#+begin_example
NIL
#+end_example


